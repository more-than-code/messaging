// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: messaging.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingClient interface {
	GenerateVerificationCode(ctx context.Context, in *GenerateVerificationCodeRequest, opts ...grpc.CallOption) (*GenerateVerificationCodeResponse, error)
	ValidateVerificationCode(ctx context.Context, in *ValidateVerificationCodeRequest, opts ...grpc.CallOption) (*ValidateVerificationCodeResponse, error)
	SendEmailWithAttachment(ctx context.Context, in *SendEmailWithAttachmentRequest, opts ...grpc.CallOption) (*SendEmailWithAttachmentResponse, error)
}

type messagingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingClient(cc grpc.ClientConnInterface) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) GenerateVerificationCode(ctx context.Context, in *GenerateVerificationCodeRequest, opts ...grpc.CallOption) (*GenerateVerificationCodeResponse, error) {
	out := new(GenerateVerificationCodeResponse)
	err := c.cc.Invoke(ctx, "/pb.Messaging/GenerateVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ValidateVerificationCode(ctx context.Context, in *ValidateVerificationCodeRequest, opts ...grpc.CallOption) (*ValidateVerificationCodeResponse, error) {
	out := new(ValidateVerificationCodeResponse)
	err := c.cc.Invoke(ctx, "/pb.Messaging/ValidateVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) SendEmailWithAttachment(ctx context.Context, in *SendEmailWithAttachmentRequest, opts ...grpc.CallOption) (*SendEmailWithAttachmentResponse, error) {
	out := new(SendEmailWithAttachmentResponse)
	err := c.cc.Invoke(ctx, "/pb.Messaging/SendEmailWithAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServer is the server API for Messaging service.
// All implementations must embed UnimplementedMessagingServer
// for forward compatibility
type MessagingServer interface {
	GenerateVerificationCode(context.Context, *GenerateVerificationCodeRequest) (*GenerateVerificationCodeResponse, error)
	ValidateVerificationCode(context.Context, *ValidateVerificationCodeRequest) (*ValidateVerificationCodeResponse, error)
	SendEmailWithAttachment(context.Context, *SendEmailWithAttachmentRequest) (*SendEmailWithAttachmentResponse, error)
	mustEmbedUnimplementedMessagingServer()
}

// UnimplementedMessagingServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (UnimplementedMessagingServer) GenerateVerificationCode(context.Context, *GenerateVerificationCodeRequest) (*GenerateVerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVerificationCode not implemented")
}
func (UnimplementedMessagingServer) ValidateVerificationCode(context.Context, *ValidateVerificationCodeRequest) (*ValidateVerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVerificationCode not implemented")
}
func (UnimplementedMessagingServer) SendEmailWithAttachment(context.Context, *SendEmailWithAttachmentRequest) (*SendEmailWithAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailWithAttachment not implemented")
}
func (UnimplementedMessagingServer) mustEmbedUnimplementedMessagingServer() {}

// UnsafeMessagingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServer will
// result in compilation errors.
type UnsafeMessagingServer interface {
	mustEmbedUnimplementedMessagingServer()
}

func RegisterMessagingServer(s grpc.ServiceRegistrar, srv MessagingServer) {
	s.RegisterService(&Messaging_ServiceDesc, srv)
}

func _Messaging_GenerateVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GenerateVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Messaging/GenerateVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GenerateVerificationCode(ctx, req.(*GenerateVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ValidateVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ValidateVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Messaging/ValidateVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ValidateVerificationCode(ctx, req.(*ValidateVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_SendEmailWithAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailWithAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).SendEmailWithAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Messaging/SendEmailWithAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).SendEmailWithAttachment(ctx, req.(*SendEmailWithAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Messaging_ServiceDesc is the grpc.ServiceDesc for Messaging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messaging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateVerificationCode",
			Handler:    _Messaging_GenerateVerificationCode_Handler,
		},
		{
			MethodName: "ValidateVerificationCode",
			Handler:    _Messaging_ValidateVerificationCode_Handler,
		},
		{
			MethodName: "SendEmailWithAttachment",
			Handler:    _Messaging_SendEmailWithAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}
